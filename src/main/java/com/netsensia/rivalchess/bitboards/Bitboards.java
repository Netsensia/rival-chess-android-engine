package com.netsensia.rivalchess.bitboards;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public final class Bitboards {






    public static final List<Long> blackPawnMovesForward = Collections.unmodifiableList(Arrays.asList(
            0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L,
            0x1L, 0x2L, 0x4L, 0x8L, 0x10L, 0x20L, 0x40L, 0x80L,
            0x100L, 0x200L, 0x400L, 0x800L, 0x1000L, 0x2000L, 0x4000L, 0x8000L,
            0x10000L, 0x20000L, 0x40000L, 0x80000L, 0x100000L, 0x200000L, 0x400000L, 0x800000L,
            0x1000000L, 0x2000000L, 0x4000000L, 0x8000000L, 0x10000000L, 0x20000000L, 0x40000000L, 0x80000000L,
            0x100000000L, 0x200000000L, 0x400000000L, 0x800000000L, 0x1000000000L, 0x2000000000L, 0x4000000000L, 0x8000000000L,
            0x10000000000L, 0x20000000000L, 0x40000000000L, 0x80000000000L, 0x100000000000L, 0x200000000000L, 0x400000000000L, 0x800000000000L,
            0x1000000000000L, 0x2000000000000L, 0x4000000000000L, 0x8000000000000L, 0x10000000000000L, 0x20000000000000L, 0x40000000000000L, 0x80000000000000L));

    public static final List<Long> blackPawnMovesCapture = Collections.unmodifiableList(Arrays.asList(
            0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L,
            0x2L, 0x5L, 0xaL, 0x14L, 0x28L, 0x50L, 0xa0L, 0x40L,
            0x200L, 0x500L, 0xa00L, 0x1400L, 0x2800L, 0x5000L, 0xa000L, 0x4000L,
            0x20000L, 0x50000L, 0xa0000L, 0x140000L, 0x280000L, 0x500000L, 0xa00000L, 0x400000L,
            0x2000000L, 0x5000000L, 0xa000000L, 0x14000000L, 0x28000000L, 0x50000000L, 0xa0000000L, 0x40000000L,
            0x200000000L, 0x500000000L, 0xa00000000L, 0x1400000000L, 0x2800000000L, 0x5000000000L, 0xa000000000L, 0x4000000000L,
            0x20000000000L, 0x50000000000L, 0xa0000000000L, 0x140000000000L, 0x280000000000L, 0x500000000000L, 0xa00000000000L, 0x400000000000L,
            0x2000000000000L, 0x5000000000000L, 0xa000000000000L, 0x14000000000000L, 0x28000000000000L, 0x50000000000000L, 0xa0000000000000L, 0x40000000000000L));

    public static final List<Long> whitePassedPawnMask = Collections.unmodifiableList(Arrays.asList(
            0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
            0x0003030303030000L, 0x0007070707070000L, 0x000E0E0E0E0E0000L, 0x001C1C1C1C1C0000L, 0x0038383838380000L, 0x0070707070700000L, 0x00E0E0E0E0E00000L, 0x00C0C0C0C0C00000L,
            0x0003030303000000L, 0x0007070707000000L, 0x000E0E0E0E000000L, 0x001C1C1C1C000000L, 0x0038383838000000L, 0x0070707070000000L, 0x00E0E0E0E0000000L, 0x00C0C0C0C0000000L,
            0x0003030300000000L, 0x0007070700000000L, 0x000E0E0E00000000L, 0x001C1C1C00000000L, 0x0038383800000000L, 0x0070707000000000L, 0x00E0E0E000000000L, 0x00C0C0C000000000L,
            0x0003030000000000L, 0x0007070000000000L, 0x000E0E0000000000L, 0x001C1C0000000000L, 0x0038380000000000L, 0x0070700000000000L, 0x00E0E00000000000L, 0x00C0C00000000000L,
            0x0003000000000000L, 0x0007000000000000L, 0x000E000000000000L, 0x001C000000000000L, 0x0038000000000000L, 0x0070000000000000L, 0x00E0000000000000L, 0x00C0000000000000L,
            0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
            0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L));

    public static final List<Long> blackPassedPawnMask = Collections.unmodifiableList(Arrays.asList(
            0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
            0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
            0x0000000000000300L, 0x0000000000000700L, 0x0000000000000E00L, 0x0000000000001C00L, 0x0000000000003800L, 0x0000000000007000L, 0x000000000000E000L, 0x000000000000C000L,
            0x0000000000030300L, 0x0000000000070700L, 0x00000000000E0E00L, 0x00000000001C1C00L, 0x0000000000383800L, 0x0000000000707000L, 0x0000000000E0E000L, 0x0000000000C0C000L,
            0x0000000003030300L, 0x0000000007070700L, 0x000000000E0E0E00L, 0x000000001C1C1C00L, 0x0000000038383800L, 0x0000000070707000L, 0x00000000E0E0E000L, 0x00000000C0C0C000L,
            0x0000000303030300L, 0x0000000707070700L, 0x0000000E0E0E0E00L, 0x0000001C1C1C1C00L, 0x0000003838383800L, 0x0000007070707000L, 0x000000E0E0E0E000L, 0x000000C0C0C0C000L,
            0x0000030303030300L, 0x0000070707070700L, 0x00000E0E0E0E0E00L, 0x00001C1C1C1C1C00L, 0x0000383838383800L, 0x0000707070707000L, 0x0000E0E0E0E0E000L, 0x0000C0C0C0C0C000L,
            0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L));

    public static final List<Long> whiteKingShieldMask = Collections.unmodifiableList(Arrays.asList(
            (1L << 9 | 1L << 8),
            (1L << 10 | 1L << 9 | 1L << 8),
            (1L << 11 | 1L << 10 | 1L << 9),
            (1L << 12 | 1L << 11 | 1L << 10),
            (1L << 13 | 1L << 12 | 1L << 11),
            (1L << 14 | 1L << 13 | 1L << 12),
            (1L << 15 | 1L << 14 | 1L << 13),
            (1L << 15 | 1L << 14)));

    public static final List<Integer> bitFlippedHorizontalAxis = Collections.unmodifiableList(Arrays.asList(
            56, 57, 58, 59, 60, 61, 62, 63, 48, 49, 50, 51, 52, 53, 54, 55, 40, 41, 42, 43, 44, 45, 46, 47, 32, 33, 34, 35, 36, 37, 38, 39, 24, 25, 26, 27, 28, 29, 30, 31, 16, 17, 18, 19, 20, 21, 22, 23, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7
    ));

    private Bitboards() {
    }

}
